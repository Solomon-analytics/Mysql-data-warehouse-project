/*
=======================================================================================
Stored Procedure: Load Silver Layer (Bronze ---> Silver)
=======================================================================================
Script Purpose:
    This stored procedure performs the ETL ( Extract, Transform, Load) process to
    populate the 'silver' schema tables from 'bronze' schema.
    Actions Performed:
    - Truncate silver tables.
    - Inserts transformed and cleansed data from Bronze to Silver tables.

Parameters:
        None.
        This stored procedure does not accept any parameters or return any values.

Usage Example:
Exec silver.load_silver;
========================================================================================
*/

CREATE OR ALTER PROCEDURE silver.load_silver AS
BEGIN
PRINT '>> Truncating Table: silver.crm_cust_info';
TRUNCATE TABLE silver.crm_cust_info;
PRINT '>> Inserting Data into: silver.crm_cust_info';
INSERT INTO silver.crm_cust_info (
cst_id,
cst_key,
cst_firstname,
cst_lastname,
cst_marital_status,
cst_gndr,
cst_create_date)
SELECT
cst_id,
cst_key,
TRIM(cst_firstname) AS cst_firstname,
TRIM(cst_lastname) AS cst_lastname,
CASE WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'
     WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'
     ELSE 'N/a' END cst_marital_status, -- Normalise marital status values to readable format
CASE WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
     WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
     ELSE 'N/a' END cst_gndr, -- Normalize gender values to readable format
cst_create_date
FROM (
SELECT *,
ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
FROM bronze.crm_cust_info
WHERE cst_id IS NOT NULL) t
WHERE flag_last = 1; -- Select the most recent record per customer



PRINT '>> Truncating Table: silver.crm_prd_info';
TRUNCATE TABLE silver.crm_prd_info;
PRINT '>> Inserting Data into: silver.crm_prd_info';
INSERT INTO silver.crm_prd_info (
prd_id,
cat_id,
prd_key,
prd_nm,
prd_cost,
prd_line,
prd_start_dt,
prd_end_dt
)
SELECT
prd_id,
REPLACE(SUBSTRING(prd_key, 1, 5), '-', '_') AS cat_id, -- Extract Cat_id
SUBSTRING(prd_key, 7, LEN(prd_key)) AS prd_key, -- Extract prd_key
prd_nm,
ISNULL(prd_cost, 0) AS prd_cost,
CASE UPPER(TRIM(prd_line))
     WHEN 'M' THEN 'Mountain'
     WHEN 'R' THEN 'Road'
     WHEN 'S' THEN 'Other Sales'
     WHEN 'T' THEN 'Touring'
     ELSE 'N/a' 
     END AS prd_line, -- Map prd_line codes to descriptive values
CAST(prd_start_dt AS DATE) AS prd_start_dt, 
CAST(LEAD(prd_start_dt) OVER (PARTITION BY prd_key ORDER BY prd_start_dt) - 1 AS DATE) AS prd_end_dt -- Calculate end date as one day before the next date
FROM bronze.crm_prd_info;


PRINT '>> Truncating Table: silver.crm_sales_details';
TRUNCATE TABLE silver.crm_sales_details;
PRINT '>> Inserting Data into: silver.crm_sales_details';
INSERT INTO silver.crm_sales_details (
sls_ord_num,
sls_prd_key,
sls_cust_id,
sls_order_dt,
sls_ship_dt,
sls_due_dt,
sls_sales,
sls_quantity,
sls_price
)
SELECT
sls_ord_num,
sls_prd_key,
sls_cust_id,
CASE WHEN sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
     ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
     END AS sls_order_dt,
     CASE WHEN sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
     ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
     END AS sls_ship_dt,
CASE WHEN sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
     ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
     END AS sls_due_dt,
CASE WHEN sls_sales <= 0 OR sls_sales IS NULL OR sls_sales != sls_quantity * ABS(sls_price)
     THEN sls_quantity * ABS(sls_price)
     ELSE sls_sales
     END AS sls_sales, -- Recalculate sales if original value is missing or incorrect
CASE WHEN sls_quantity IS NULL OR sls_quantity <= 0 OR sls_quantity != sls_sales / NULLIF(sls_price, 0)
     THEN sls_sales / NULLIF(sls_price, 0)
     ELSE sls_quantity
     END AS sls_quantity,-- Recalculate quantity if original value is missing or incorrect
CASE WHEN sls_price <= 0 OR sls_price IS NULL OR sls_price != sls_sales / NULLIF(sls_quantity, 0)
     THEN sls_sales / NULLIF(sls_quantity, 0)
     ELSE sls_price
     END AS sls_price -- Recalculate price if original value is missing or incorrect
FROM bronze.crm_sales_details;





PRINT '>> Truncating Table: Silver.erp_cust_az12';
TRUNCATE TABLE Silver.erp_cust_az12;
PRINT '>> Inserting Data into: Silver.erp_cust_az12';
INSERT INTO Silver.erp_cust_az12 (
gen,
cid,
bdate
)
SELECT
CASE WHEN UPPER(TRIM(gen)) IN ('F', 'Female') THEN 'Female'
     WHEN UPPER(TRIM(gen)) IN ('M', 'Male') THEN 'Male'
     ELSE 'n/a'
     END AS gen,
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4, LEN(cid))
     ELSE cid
     END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
     ELSE bdate
     END AS bdate
FROM bronze.erp_cust_az12;



PRINT '>> Truncating Table: Silver.erp_1oc_a101';
TRUNCATE TABLE Silver.erp_1oc_a101;
PRINT '>> Inserting Data into: Silver.erp_1oc_a101';
INSERT INTO Silver.erp_1oc_a101 (
cid,
cntry)
SELECT
REPLACE(cid, '-', '') AS cid,
CASE WHEN TRIM(cntry) IN ('DE', 'Germany') THEN 'Germany'
     WHEN TRIM(cntry) IN ('USA', 'US', 'United States') THEN 'USA'
     WHEN (cntry) IS NULL OR cntry = '' THEN 'n/a'
     ELSE TRIM(cntry)
     END AS cntry
FROM Bronze.erp_1oc_a101;



PRINT '>> Truncating Table: Silver.erp_px_cat_g1v2';
TRUNCATE TABLE Silver.erp_px_cat_g1v2;
PRINT '>> Inserting Data into: Silver.erp_px_cat_g1v2';
INSERT INTO Silver.erp_px_cat_g1v2 (
id, cat, subcat, maintenance)
SELECT 
id,
cat,
subcat,
maintenance
FROM bronze.erp_px_cat_g1v2;
END;
